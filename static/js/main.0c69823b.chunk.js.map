{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","checkRow","i","arr","k","n","checkColumn","j","checkLeftDiagnol","checkRightDiagnol","len","m","isGameOver","posibilitiesLeft","ref","changePlayer","setState","state","user","setDrawStatus","gameOver","handleClick","user1","user2","getStyle","color","icon","setIcon","ele","style","backgroundColor","innerText","handleChange","val","Number","reinitialise","Array","this","board","boxStyle","key","className","width","height","onClick","push","htmlFor","name","type","onChange","evt","target","value","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0c69823b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { PureComponent } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nexport default class App extends PureComponent {\n  constructor() {\n    super();\n    this.user1 = [];\n    this.user2 = [];\n    this.ref = [];\n    this.n = 0;\n    this.state = {\n      user: 1,\n      gameOver: '',\n      n: 0,\n    }\n  }\n\n  componentWillUnmount() {\n    this.user1 = null;\n    this.user2 = null;\n    this.ref = null;\n    this.n = null;\n  }\n\n  checkRow = (i, arr) => {\n    //keep i constant and navigate throw j\n    for (let k = 0; k < this.n; k++) {\n      if(!arr[i][k]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  checkColumn = (j, arr) => {\n    //keep j constant and navigate throw i\n    for (let k = 0; k < this.n; k++) {\n      if(!arr[k][j]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  checkLeftDiagnol = (i, j, arr) => {\n    for (let k = 0; k < this.n; k++) {\n      if(!arr[k][k]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  checkRightDiagnol = (i, j, arr) => {\n    const len = this.n - 1;\n    for (let m = len; m >= 0; m--) {\n      const n = len - m;\n      if(!arr[m][n]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  isGameOver = (i, j, arr) => {\n    return this.checkColumn(j, arr) || this.checkRow(i, arr) || this.checkLeftDiagnol(i, j, arr) || this.checkRightDiagnol(i, j, arr);\n  }\n\n  posibilitiesLeft = () => {\n    for (let i = 0; i < this.n; i++) {\n      for (let j = 0; j < this.n ; j++) {\n        if (this.ref[i][j]['innerText'] == '') {\n          return true;\n        }\n      }\n    }\n  }\n\n  changePlayer = () => {\n    this.setState((state) => {\n      if (state.user === 1) {\n        return {\n          user: 2\n        }\n      } else {\n        return {\n          user: 1\n        }\n      }\n    });\n  }\n\n  setDrawStatus = () => {\n    this.setState({gameOver: 'draw'});\n  }\n\n  handleClick = (i, j) => {\n    let gameOver = false;\n    if (this.state.user == 1) {\n      this.user1[i][j] = true;\n      gameOver = this.isGameOver(i, j, this.user1);\n    } else if (this.state.user == 2) {\n      this.user2[i][j] = true;\n      gameOver = this.isGameOver(i, j, this.user2);\n    }\n    if (!gameOver) {\n      if (this.posibilitiesLeft()) {\n        this.changePlayer();\n      } else {\n        this.setDrawStatus();\n      }\n    } else {\n      this.setState({gameOver: 'won'});\n    }\n  }\n\n  getStyle = () => {\n    if (this.state.user == 1)\n      return {\n        color: 'red',\n        icon: 'X',\n      };\n    else if (this.state.user == 2)\n      return {\n        color: 'blue',\n        icon: 'O',\n      };\n    else\n      return '';\n  }\n\n  setIcon = (i, j) => {\n    const ele = this.ref[i][j];\n    const style = this.getStyle();\n    ele.style.backgroundColor = style.color;\n    ele.innerText = style.icon;\n  }\n\n  handleChange = (val) => {\n    if (val == '') {\n      this.setState({n: 0});\n    } else {\n      this.n = Number(val) || 0;\n    }\n  }\n\n  reinitialise = () => {\n    this.user1 = [];\n    this.user2 = [];\n    this.ref = [];\n    for (let i = 0; i < this.n; i++) {\n      this.user1[i] = new Array(this.n);\n      this.user2[i] = new Array(this.n);\n      this.ref[i] = new Array(this.n);\n      for (let j = 0; j < this.n; j++) {\n        this.user1[i][j] = false;\n        this.user2[i][j] = false;\n      }\n    }\n  }\n\n  render() {\n    const board = [];\n\n    const boxStyle = 500/this.n - 10;\n\n    for (let i = 0; i < this.n; i++) {\n      for (let j = 0; j < this.n; j++) {\n        const key = `${i}-${j}`;\n        const ele = (\n          <div key={key} className=\"app__div__divInner\"\n            style={{width: boxStyle, height: boxStyle}}\n            ref={(ref) => {\n              this.ref[i][j] = {};\n              this.ref[i][j] = ref;\n            }}\n            onClick={() => {\n              this.setIcon(i, j);\n              this.handleClick(i, j);\n            }}\n          >\n          </div> );\n        board.push(ele);\n      }\n    }\n\n    return (\n      <div className='app'>\n        <h3 className='app__h3'> Tic Tac Toe Game </h3>\n        <p> Welcome to Tic Tac Toe Game. This game is played between two players using N * N board. <br/>\n          The game will be won if a player manages to get his pawns in horizontal, vertical or diagnol row\n        </p>\n        <label htmlFor='numberInput'> Enter value of N : </label>\n        <input name='numberInput' type='text'\n          className='app__input'\n          onChange={(evt) => {\n            this.handleChange(evt.target.value);\n          }}\n        />\n        <button\n          className=\"app__input app__button\"\n          onClick={() => {\n            this.setState({n: this.n, user: 1, gameOver: ''});\n            this.reinitialise();\n          }}\n        >\n          Start Game\n        </button>\n        {this.state.n > 0 &&\n          <div>\n            <div className='app__span'>\n            <span> Game :\n              {this.state.user == 1 ? <span className='app__span__player1'> Player1 </span> : <span className='app__span__player2'> Player2 </span>}\n            </span>\n            <br/>\n            {this.state.gameOver === 'won' && <span> Game Over :  Player{this.state.user} Won </span>}\n            {this.state.gameOver === 'draw' && <span> Game Over :  Draw </span>}\n          </div>\n          <div className='app__div'>\n            <div className='app__div__div'>\n              {board}\n            </div>\n          </div>\n        </div>\n      }\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}